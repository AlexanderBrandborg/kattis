# Difficulty: 2.0
class Card:

    def __init__(self, index, str):
        self.index = index
        self.number = int(str[0])
        self.shape = str[1]
        self.pattern = str[2]
        self.colour = str[3]

    def __str__(self):
        return str(self.index)

class CardSet:
    def __init__(self, card1, card2, card3):
        self.card1 = card1
        self.card2 = card2
        self.card3 = card3
    
    def is_valid(self):
        num_set = set([self.card1.number, self.card2.number, self.card3.number])
        shape_set = set([self.card1.shape, self.card2.shape, self.card3.shape])
        pattern_set = set([self.card1.pattern, self.card2.pattern, self.card3.pattern])
        colour_set = set([self.card1.colour, self.card2.colour, self.card3.colour])

        res = len(num_set) != 2 and len(shape_set) != 2 and len(pattern_set) != 2 and len(colour_set) != 2
        return res

    def __str__(self):
        return str(self.card1) + " " + str(self.card2) + " " + str(self.card3)            

def recursive_walk(cards, active_set):
    if len(active_set) == 3:
        return CardSet(active_set[0], active_set[1], active_set[2])
    l = []

    for i in range(len(cards)):
        result = recursive_walk(cards[i+1:], active_set + [cards[i]])
        if isinstance(result, CardSet):
            l.append(result)
        else:
            l.extend(result)
    return l

def main():
    cards = []
    for i in range(4):
        string = input().split(" ")
        for j in range(3): 
            cards.append(Card(((i * 3) + j + 1), string[j]))

    all_sets = recursive_walk(cards, [])

    result = []
    for card_set in all_sets:
        if(card_set.is_valid()):
            result.append(card_set)
    
    #result.sort()
    if not result:
        print("no sets")
    else:
        for s in result:
            print(s)

if __name__=="__main__":
    main()